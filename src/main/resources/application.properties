#Application name
spring.application.name=partner-gateway
#env
spring.profiles.active=${ACTIVE_PROFILES:local}
#Tomcat server
server.port=8006
server.servlet.context-path=/api
server.compression.enabled=true
server.error.whitelabel.enabled=false
server.tomcat.threads.max=200
server.tomcat.accept-count=100
server.tomcat.max-connections=10000
#header-size
server.max-http-request-header-size=8KB
spring.mvc.pathmatch.matching-strategy=ant_path_matcher
# jackson
spring.jackson.default-property-inclusion=non_null
spring.jackson.deserialization.read-unknown-enum-values-as-null=true
# graceful
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30S
# circuit breaker
spring.cloud.openfeign.circuitbreaker.enabled=true
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowSize=50
resilience4j.timelimiter.configs.default.timeoutDuration=30S
resilience4j.timelimiter.configs.default.cancelRunningFuture=true
# actuator
management.endpoints.web.exposure.include=prometheus,info,health,metrics
management.endpoint.health.show-details=always
# swagger
springdoc.packages-to-scan=vn.com.atomi.loyalty.partnergateway.controller
# logging
custom.properties.logging.exclude-response-body=false
logging.config=classpath:log4j.xml
#thread pool
custom.properties.service.thread.pool.task.executor=true
custom.properties.service.thread.pool.task.executor.core.pool.size=1
custom.properties.service.thread.pool.task.executor.max.pool.size=20
custom.properties.service.thread.pool.task.executor.queue.capacity=5000
# redis
spring.data.redis.connect-timeout=2S
spring.data.redis.repositories.enabled=false
spring.data.redis.lettuce.pool.enabled=true
spring.data.redis.client-type=lettuce
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_POST}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.database=${REDIS_DB}
# url
custom.properties.loyalty-core-service-url=${CORE_SERVICE_URL}
custom.properties.loyalty-common-service-url=${COMMON_SERVICE_URL}
custom.properties.ctime-client-url=${C_TIME_URL}
#kafka
custom.properties.kafka.bootstrap-servers=${KAFKA_SERVER}
custom.properties.messaging.consumer.pool.size=${KAFKA_CONSUMER_POOL}
custom.properties.messaging.consumer.pool.thread.name.prefix=messaging-thread-pool-
custom.properties.messaging.kafka.groupId=${spring.application.name}
custom.properties.messaging.kafka.consumer.batch=false
custom.properties.messaging.kafka.consumer.number.of.message.in.batch=1
custom.properties.kafka.comsumer.max.timeout=${KAFKA_CONSUMER_TIMEOUT}
custom.properties.graceful.shutdown.messaging.consumer.wait.time.max=300
custom.properties.kafka.topic.retries-event.name=RETRIES_EVENT
custom.properties.kafka.topic.workflow-event.name=WORKFLOW_EVENT
custom.properties.kafka.topic.workflow-event.concurrent.thread=4
custom.properties.kafka.topic.workflow-event-retries.name=${custom.properties.kafka.topic.workflow-event.name}.#{'${spring.application.name}'.toUpperCase()}.RETRIES
# secure
custom.properties.private.key=${PRIVATE_KEY}
custom.properties.internal-api.credentials=${INTERNAL_CREDENTIALS}